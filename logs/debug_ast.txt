AstNodeFileWrapper { node: AstNode { children_scopes: [AstNode { children_scopes: [], operations: [(Context(Function("testing", [0, 0, 0], [])), Some(false), 3), (NoOp([(String("print"), "   print \"testing...\"", 3, 5), (SingleQ, "   print \"testing...\"", 9, 1), (String("testing"), "   print \"testing...\"", 10, 7), (String("."), "   print \"testing...\"", 17, 1), (String("."), "   print \"testing...\"", 18, 1), (String("."), "   print \"testing...\"", 19, 1), (SingleQ, "   print \"testing...\"", 20, 1)], 4), Some(false), 4)], ordering: [Left(0), Left(1)], base_line_index: 3, name: "testing", context: Some(Function("testing", [0, 0, 0], [])) }], operations: [(None, Some(false), 1), (Function("testing", [0, 1], []), Some(false), 3), (None, Some(false), 6)], ordering: [Left(0), Left(1), Right(0), Left(2)], base_line_index: 1, name: "hello.world", context: None }, exporting: [([], "hello.world")], importing: [], file_name: "hello.world" }
>   2:   None
>   4:   Function("testing", [0, 1], [])
>   4:      Context(Function("testing", [0, 0, 0], []))
>   5:      NoOp([(String("print"), "   print \"testing...\"", 3, 5), (SingleQ, "   print \"testing...\"", 9, 1), (String("testing"), "   print \"testing...\"", 10, 7), (String("."), "   print \"testing...\"", 17, 1), (String("."), "   print \"testing...\"", 18, 1), (String("."), "   print \"testing...\"", 19, 1), (SingleQ, "   print \"testing...\"", 20, 1)], 4)
>   7:   None
AstNodeFileWrapper { node: AstNode { children_scopes: [], operations: [(None, Some(false), 8), (Assignment(Variable { var_type: Var("🤯💀🔥"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(123))), false), Some(false), 10), (Assignment(Variable { var_type: Var("\u{fe0f}❤\u{fe0f}"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(456))), false), Some(false), 11)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 8, name: "world.hello", context: None }, exporting: [], importing: [], file_name: "world.hello" }
>   9:   None
>  11:   Assignment(Variable { var_type: Var("🤯💀🔥"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(123))), false)
>  12:   Assignment(Variable { var_type: Var("\u{fe0f}❤\u{fe0f}"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(456))), false)
AstNodeFileWrapper { node: AstNode { children_scopes: [], operations: [(None, Some(false), 13)], ordering: [Left(0)], base_line_index: 13, name: "Unnamed", context: None }, exporting: [], importing: [], file_name: "Unnamed" }
>  14:   None
AstNodeFileWrapper { node: AstNode { children_scopes: [], operations: [(None, Some(false), 14), (None, Some(false), 16), (None, Some(false), 17)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 14, name: "exported.exporting", context: None }, exporting: [([], "main.rpp")], importing: [("testing", Some("test"), "hello.world", [])], file_name: "exported.exporting" }
>  15:   None
>  17:   None
>  18:   None
AstNodeFileWrapper { node: AstNode { children_scopes: [AstNode { children_scopes: [AstNode { children_scopes: [], operations: [(Context(NoOp([(String("fat"), "   fat", 3, 3)], 38)), Some(false), 38), (NoOp([(String("gun"), "      gun", 6, 3)], 39), Some(false), 39)], ordering: [Left(0), Left(1)], base_line_index: 38, name: "Unnamed", context: Some(NoOp([(String("fat"), "   fat", 3, 3)], 38)) }, AstNode { children_scopes: [AstNode { children_scopes: [], operations: [(Context(NoOp([(String("why"), "      why", 6, 3)], 41)), Some(false), 41), (NoOp([(String("testing"), "         testing", 9, 7)], 42), Some(false), 42)], ordering: [Left(0), Left(1)], base_line_index: 41, name: "Unnamed", context: Some(NoOp([(String("why"), "      why", 6, 3)], 41)) }], operations: [(Context(NoOp([(String("nogood"), "   nogood", 3, 6)], 40)), Some(false), 40), (NoOp([(String("why"), "      why", 6, 3)], 41), Some(false), 41), (ScopeChange(0), None, 41), (NoOp([(String("but_noooo"), "   but_noooo?", 3, 9), (Debug, "   but_noooo?", 12, 1)], 43), Some(true), 43)], ordering: [Left(0), Left(1), Right(0), Left(3)], base_line_index: 40, name: "Unnamed", context: Some(NoOp([(String("nogood"), "   nogood", 3, 6)], 40)) }, AstNode { children_scopes: [], operations: [(Context(Function("other_test_script", [4, 0, 2, 0], ["g", "p", "t"])), Some(false), 44), (None, Some(false), 45)], ordering: [Left(0), Left(1)], base_line_index: 44, name: "other_test_script", context: Some(Function("other_test_script", [4, 0, 2, 0], ["g", "p", "t"])) }], operations: [(Context(Function("pet", [4, 0, 0], ["g"])), Some(false), 37), (NoOp([(String("fat"), "   fat", 3, 3)], 38), Some(false), 38), (ScopeChange(0), None, 38), (NoOp([(String("nogood"), "   nogood", 3, 6)], 40), Some(false), 40), (ScopeChange(1), None, 40), (Function("other_test_script", [4, 0, 7], ["g", "p", "t"]), Some(false), 44), (NoOp([(String("noop"), "noop!", 0, 4), (Priority(1), "noop!", 4, 1)], 47), Some(false), 47)], ordering: [Left(0), Left(1), Right(0), Left(3), Right(1), Left(5), Right(2), Left(6)], base_line_index: 37, name: "pet", context: Some(Function("pet", [4, 0, 0], ["g"])) }, AstNode { children_scopes: [], operations: [(Context(Function("pello", [4, 1, 0], ["hello", "world"])), Some(false), 49), (None, Some(false), 50)], ordering: [Left(0), Left(1)], base_line_index: 49, name: "pello", context: Some(Function("pello", [4, 1, 0], ["hello", "world"])) }, AstNode { children_scopes: [AstNode { children_scopes: [], operations: [(Context(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("printing"))), false)), Some(false), 53), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("_no-oping\" "))), false), Some(false), 54), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("test"))), false), Some(false), 55)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 53, name: "Unnamed", context: Some(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("printing"))), false)) }, AstNode { children_scopes: [], operations: [(Context(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("worlding"))), false)), Some(false), 57), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("helloing"))), false), Some(false), 58), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("pello"))), false), Some(false), 59)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 57, name: "Unnamed", context: Some(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("worlding"))), false)) }], operations: [(Context(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("testing\" "))), false)), Some(false), 52), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("printing"))), false), Some(false), 53), (ScopeChange(0), None, 53), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("pello-ing"))), false), Some(false), 56), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("worlding"))), false), Some(false), 57), (ScopeChange(1), None, 57), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("returning"))), false), Some(false), 60), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("nopeing"))), false), Some(false), 61)], ordering: [Left(0), Left(1), Right(0), Left(3), Left(4), Right(1), Left(6), Left(7)], base_line_index: 52, name: "Unnamed", context: Some(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("testing\" "))), false)) }], operations: [(None, Some(false), 19), (None, Some(false), 20), (None, Some(false), 21), (Assignment(Variable { var_type: Var("world"), reassignable: Some(false), mutable: Some(false), global: Some(Some(false)), lifetime: Some(Infinity), priority: Some(4) }, Some(Right(ConstStr("hello world!!!!"))), false), Some(false), 23), (NoOp([(String("print"), "print(\"${next t}\"?", 0, 5), (SingleQ, "print(\"${next t}\"?", 6, 1), (String("$"), "print(\"${next t}\"?", 7, 1), (Next, "print(\"${next t}\"?", 9, 4), (String("t"), "print(\"${next t}\"?", 14, 1), (SingleQ, "print(\"${next t}\"?", 16, 1), (Debug, "print(\"${next t}\"?", 17, 1)], 25), Some(true), 25), (Assignment(Variable { var_type: Var("t"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(32))), false), Some(false), 26), (Assignment(Variable { var_type: Var("t"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Seconds(-2)), priority: Some(-2) }, Some(Right(ConstInt(3))), false), Some(false), 27), (Assignment(Variable { var_type: Var("v🍎❤\u{fe0f}💀😁😔🏆🌏🖤🍍❤\u{fe0f}🤍◾\u{fe0f}d"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Lines(-9)), priority: Some(-2) }, Some(Right(ConstInt(3))), false), Some(false), 28), (Assignment(Variable { var_type: Var("💀"), reassignable: Some(true), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("10!!!!!!?"))), false), Some(false), 29), (Assignment(Variable { var_type: Var("❤\u{fe0f}"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(18) }, Some(Right(ConstStr("hello"))), false), Some(false), 30), (Assignment(Variable { var_type: Var("b"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, None, false), Some(false), 31), (Assignment(Variable { var_type: Var("string"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, Some(Right(ConstStr(" hello worldio function! "))), false), Some(false), 32), (Assignment(Variable { var_type: Var("5"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, Some(Right(ConstInt(4))), false), Some(false), 33), (Assignment(Variable { var_type: Var("t"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None }, Some(Left(Expression { left_op: Right(Variable(Variable { var_type: Var("t"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None })), operator: Add, right_op: Right(ConstInt(1)) })), true), Some(true), 35), (Function("pet", [4, 14], ["g"]), Some(false), 37), (Function("pello", [4, 24], ["hello", "world"]), Some(false), 49), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("testing\" "))), false), Some(false), 52), (ScopeChange(2), None, 52), (Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("nah"))), false), Some(false), 63)], ordering: [Left(0), Left(1), Left(2), Left(3), Left(4), Left(5), Left(6), Left(7), Left(8), Left(9), Left(10), Left(11), Left(12), Left(13), Left(14), Right(0), Left(15), Right(1), Left(16), Right(2), Left(18)], base_line_index: 19, name: "main.rpp", context: None }, exporting: [], importing: [("test", None, "exported.exporting", []), ("print", None, "std.rpp", [])], file_name: "main.rpp" }
>  20:   None
>  21:   None
>  22:   None
>  24:   Assignment(Variable { var_type: Var("world"), reassignable: Some(false), mutable: Some(false), global: Some(Some(false)), lifetime: Some(Infinity), priority: Some(4) }, Some(Right(ConstStr("hello world!!!!"))), false)
]  26:   NoOp([(String("print"), "print(\"${next t}\"?", 0, 5), (SingleQ, "print(\"${next t}\"?", 6, 1), (String("$"), "print(\"${next t}\"?", 7, 1), (Next, "print(\"${next t}\"?", 9, 4), (String("t"), "print(\"${next t}\"?", 14, 1), (SingleQ, "print(\"${next t}\"?", 16, 1), (Debug, "print(\"${next t}\"?", 17, 1)], 25)
>  27:   Assignment(Variable { var_type: Var("t"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(32))), false)
>  28:   Assignment(Variable { var_type: Var("t"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Seconds(-2)), priority: Some(-2) }, Some(Right(ConstInt(3))), false)
>  29:   Assignment(Variable { var_type: Var("v🍎❤\u{fe0f}💀😁😔🏆🌏🖤🍍❤\u{fe0f}🤍◾\u{fe0f}d"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Lines(-9)), priority: Some(-2) }, Some(Right(ConstInt(3))), false)
>  30:   Assignment(Variable { var_type: Var("💀"), reassignable: Some(true), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("10!!!!!!?"))), false)
>  31:   Assignment(Variable { var_type: Var("❤\u{fe0f}"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(18) }, Some(Right(ConstStr("hello"))), false)
>  32:   Assignment(Variable { var_type: Var("b"), reassignable: Some(false), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, None, false)
>  33:   Assignment(Variable { var_type: Var("string"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, Some(Right(ConstStr(" hello worldio function! "))), false)
>  34:   Assignment(Variable { var_type: Var("5"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, Some(Right(ConstInt(4))), false)
]  36:   Assignment(Variable { var_type: Var("t"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None }, Some(Left(Expression { left_op: Right(Variable(Variable { var_type: Var("t"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None })), operator: Add, right_op: Right(ConstInt(1)) })), true)
>  38:   Function("pet", [4, 14], ["g"])
>  38:      Context(Function("pet", [4, 0, 0], ["g"]))
>  39:      NoOp([(String("fat"), "   fat", 3, 3)], 38)
>  39:         Context(NoOp([(String("fat"), "   fat", 3, 3)], 38))
>  40:         NoOp([(String("gun"), "      gun", 6, 3)], 39)
>  41:      NoOp([(String("nogood"), "   nogood", 3, 6)], 40)
>  41:         Context(NoOp([(String("nogood"), "   nogood", 3, 6)], 40))
>  42:         NoOp([(String("why"), "      why", 6, 3)], 41)
>  42:            Context(NoOp([(String("why"), "      why", 6, 3)], 41))
>  43:            NoOp([(String("testing"), "         testing", 9, 7)], 42)
]  44:         NoOp([(String("but_noooo"), "   but_noooo?", 3, 9), (Debug, "   but_noooo?", 12, 1)], 43)
>  45:      Function("other_test_script", [4, 0, 7], ["g", "p", "t"])
>  45:         Context(Function("other_test_script", [4, 0, 2, 0], ["g", "p", "t"]))
>  46:         None
>  48:      NoOp([(String("noop"), "noop!", 0, 4), (Priority(1), "noop!", 4, 1)], 47)
>  50:   Function("pello", [4, 24], ["hello", "world"])
>  50:      Context(Function("pello", [4, 1, 0], ["hello", "world"]))
>  51:      None
>  53:   Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("testing\" "))), false)
>  53:      Context(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("testing\" "))), false))
>  54:      Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("printing"))), false)
>  54:         Context(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("printing"))), false))
>  55:         Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("_no-oping\" "))), false)
>  56:         Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("test"))), false)
>  57:      Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("pello-ing"))), false)
>  58:      Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("worlding"))), false)
>  58:         Context(Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("worlding"))), false))
>  59:         Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("helloing"))), false)
>  60:         Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("pello"))), false)
>  61:      Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("returning"))), false)
>  62:      Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("nopeing"))), false)
>  64:   Assignment(Variable { var_type: Var("test_var"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(0) }, Some(Right(ConstStr("nah"))), false)
AstNodeFileWrapper { node: AstNode { children_scopes: [AstNode { children_scopes: [], operations: [(Context(Function("print", [5, 0, 0], ["text"])), Some(false), 82), (NoOp([(String("unsafe"), "   unsafe!!", 3, 6), (Priority(2), "   unsafe!!", 9, 1)], 87), Some(false), 87), (NoOp([(String("ENV_VAR_LOG_WRITE"), "   ENV_VAR_LOG_WRITE = text!!!", 3, 17), (Compare(Equal, 0), "   ENV_VAR_LOG_WRITE = text!!!", 21, 1), (String("text"), "   ENV_VAR_LOG_WRITE = text!!!", 23, 4), (Priority(3), "   ENV_VAR_LOG_WRITE = text!!!", 27, 1)], 90), Some(false), 90), (NoOp([(String("ENV_VAR_LOG_WRITE"), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 3, 17), (Compare(Equal, 0), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 21, 1), (String("null"), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 23, 4), (Priority(3), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 27, 1)], 91), Some(false), 91)], ordering: [Left(0), Left(1), Left(2), Left(3)], base_line_index: 82, name: "print", context: Some(Function("print", [5, 0, 0], ["text"])) }, AstNode { children_scopes: [], operations: [(Context(Function("println", [5, 1, 0], ["text"])), Some(false), 102), (NoOp([(String("unsafe"), "   unsafe!!!!!!  // you can't actually wrap it around the print as the print would become a string too (useful sometimes, but not here)", 3, 6), (Priority(6), "   unsafe!!!!!!  // you can't actually wrap it around the print as the print would become a string too (useful sometimes, but not here)", 9, 1)], 105), Some(false), 105), (NoOp([(String("print"), "   print(\"{text}\\n\")", 3, 5), (SingleQ, "   print(\"{text}\\n\")", 9, 1), (String("text"), "   print(\"{text}\\n\")", 11, 4), (String("\\"), "   print(\"{text}\\n\")", 16, 1), (String("n"), "   print(\"{text}\\n\")", 17, 1), (SingleQ, "   print(\"{text}\\n\")", 18, 1)], 109), Some(false), 109)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 102, name: "println", context: Some(Function("println", [5, 1, 0], ["text"])) }, AstNode { children_scopes: [], operations: [(Context(Function("get_cpu_arch", [5, 2, 0], [])), Some(false), 119), (Assignment(Variable { var_type: Var("output"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(3) }, Some(Right(ConstStr("One that runs, duh. Otherwise it wouldn't be running this right now."))), false), Some(false), 128), (None, Some(false), 134)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 119, name: "get_cpu_arch", context: Some(Function("get_cpu_arch", [5, 2, 0], [])) }, AstNode { children_scopes: [], operations: [(Context(Function("panic", [5, 3, 0], ["msg"])), Some(false), 144), (NoOp([(String("print"), "   print(msg)!!!!!", 3, 5), (String("msg"), "   print(msg)!!!!!", 9, 3), (Priority(5), "   print(msg)!!!!!", 13, 1)], 151), Some(false), 151), (Assignment(Variable { var_type: Var("variable"), reassignable: Some(false), mutable: Some(false), global: Some(Some(false)), lifetime: Some(Lines(-2)), priority: Some(3) }, None, false), Some(false), 156), (Assignment(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None }, Some(Left(Expression { left_op: Right(Variable(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None })), operator: Add, right_op: Right(ConstInt(1)) })), true), Some(false), 161), (None, Some(false), 166)], ordering: [Left(0), Left(1), Left(2), Left(3), Left(4)], base_line_index: 144, name: "panic", context: Some(Function("panic", [5, 3, 0], ["msg"])) }, AstNode { children_scopes: [AstNode { children_scopes: [], operations: [(Context(Function("super_very_safe_deadlock", [5, 4, 0, 0], [])), Some(false), 202), (NoOp([(String("super_very_safe_deadlock"), "      super_very_safe_deadlock()", 6, 24)], 204), Some(false), 204), (None, Some(false), 205)], ordering: [Left(0), Left(1), Left(2)], base_line_index: 202, name: "super_very_safe_deadlock", context: Some(Function("super_very_safe_deadlock", [5, 4, 0, 0], [])) }], operations: [(Context(Function("sleep_forever", [5, 4, 0], [])), Some(false), 183), (Assignment(Variable { var_type: Var("variable"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(5))), false), Some(false), 188), (Assignment(Variable { var_type: Var("next_variable"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(3) }, Some(Right(ConstStr("next variable!!!"))), false), Some(false), 194), (Function("super_very_safe_deadlock", [5, 4, 3], []), Some(false), 202), (Assignment(Variable { var_type: Var("result"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, Some(Right(ConstStr("super_very_safe_deadlock"))), false), Some(false), 211), (Assignment(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None }, Some(Left(Expression { left_op: Right(Variable(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None })), operator: Add, right_op: Right(ConstInt(1)) })), true), Some(false), 214), (None, Some(false), 220)], ordering: [Left(0), Left(1), Left(2), Left(3), Right(0), Left(4), Left(5), Left(6)], base_line_index: 183, name: "sleep_forever", context: Some(Function("sleep_forever", [5, 4, 0], [])) }], operations: [(None, Some(false), 65), (None, Some(false), 75), (Function("print", [5, 2], ["text"]), Some(false), 82), (None, Some(false), 97), (Function("println", [5, 7], ["text"]), Some(false), 102), (None, Some(false), 115), (Function("get_cpu_arch", [5, 11], []), Some(false), 119), (None, Some(false), 140), (Function("panic", [5, 15], ["msg"]), Some(false), 144), (None, Some(false), 172), (Function("sleep_forever", [5, 21], []), Some(false), 183)], ordering: [Left(0), Left(1), Left(2), Right(0), Left(3), Left(4), Right(1), Left(5), Left(6), Right(2), Left(7), Left(8), Right(3), Left(9), Left(10), Right(4)], base_line_index: 65, name: "std.rpp", context: None }, exporting: [([], "main.rpp"), ([], "main.rpp"), ([], "main.rpp"), ([], "main.rpp"), ([], "main.rpp")], importing: [], file_name: "std.rpp" }
>  66:   None
>  76:   None
>  83:   Function("print", [5, 2], ["text"])
>  83:      Context(Function("print", [5, 0, 0], ["text"]))
>  88:      NoOp([(String("unsafe"), "   unsafe!!", 3, 6), (Priority(2), "   unsafe!!", 9, 1)], 87)
>  91:      NoOp([(String("ENV_VAR_LOG_WRITE"), "   ENV_VAR_LOG_WRITE = text!!!", 3, 17), (Compare(Equal, 0), "   ENV_VAR_LOG_WRITE = text!!!", 21, 1), (String("text"), "   ENV_VAR_LOG_WRITE = text!!!", 23, 4), (Priority(3), "   ENV_VAR_LOG_WRITE = text!!!", 27, 1)], 90)
>  92:      NoOp([(String("ENV_VAR_LOG_WRITE"), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 3, 17), (Compare(Equal, 0), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 21, 1), (String("null"), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 23, 4), (Priority(3), "   ENV_VAR_LOG_WRITE = null!!!  // clearing the output (async contexts may print multiple times)", 27, 1)], 91)
>  98:   None
> 103:   Function("println", [5, 7], ["text"])
> 103:      Context(Function("println", [5, 1, 0], ["text"]))
> 106:      NoOp([(String("unsafe"), "   unsafe!!!!!!  // you can't actually wrap it around the print as the print would become a string too (useful sometimes, but not here)", 3, 6), (Priority(6), "   unsafe!!!!!!  // you can't actually wrap it around the print as the print would become a string too (useful sometimes, but not here)", 9, 1)], 105)
> 110:      NoOp([(String("print"), "   print(\"{text}\\n\")", 3, 5), (SingleQ, "   print(\"{text}\\n\")", 9, 1), (String("text"), "   print(\"{text}\\n\")", 11, 4), (String("\\"), "   print(\"{text}\\n\")", 16, 1), (String("n"), "   print(\"{text}\\n\")", 17, 1), (SingleQ, "   print(\"{text}\\n\")", 18, 1)], 109)
> 116:   None
> 120:   Function("get_cpu_arch", [5, 11], [])
> 120:      Context(Function("get_cpu_arch", [5, 2, 0], []))
> 129:      Assignment(Variable { var_type: Var("output"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(3) }, Some(Right(ConstStr("One that runs, duh. Otherwise it wouldn't be running this right now."))), false)
> 135:      None
> 141:   None
> 145:   Function("panic", [5, 15], ["msg"])
> 145:      Context(Function("panic", [5, 3, 0], ["msg"]))
> 152:      NoOp([(String("print"), "   print(msg)!!!!!", 3, 5), (String("msg"), "   print(msg)!!!!!", 9, 3), (Priority(5), "   print(msg)!!!!!", 13, 1)], 151)
> 157:      Assignment(Variable { var_type: Var("variable"), reassignable: Some(false), mutable: Some(false), global: Some(Some(false)), lifetime: Some(Lines(-2)), priority: Some(3) }, None, false)
> 162:      Assignment(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None }, Some(Left(Expression { left_op: Right(Variable(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None })), operator: Add, right_op: Right(ConstInt(1)) })), true)
> 167:      None
> 173:   None
> 184:   Function("sleep_forever", [5, 21], [])
> 184:      Context(Function("sleep_forever", [5, 4, 0], []))
> 189:      Assignment(Variable { var_type: Var("variable"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(2) }, Some(Right(ConstInt(5))), false)
> 195:      Assignment(Variable { var_type: Var("next_variable"), reassignable: Some(true), mutable: Some(true), global: Some(None), lifetime: Some(Infinity), priority: Some(3) }, Some(Right(ConstStr("next variable!!!"))), false)
> 203:      Function("super_very_safe_deadlock", [5, 4, 3], [])
> 203:         Context(Function("super_very_safe_deadlock", [5, 4, 0, 0], []))
> 205:         NoOp([(String("super_very_safe_deadlock"), "      super_very_safe_deadlock()", 6, 24)], 204)
> 206:         None
> 212:      Assignment(Variable { var_type: Var("result"), reassignable: Some(false), mutable: Some(false), global: Some(None), lifetime: Some(Infinity), priority: Some(1) }, Some(Right(ConstStr("super_very_safe_deadlock"))), false)
> 215:      Assignment(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None }, Some(Left(Expression { left_op: Right(Variable(Variable { var_type: Var("varia"), reassignable: None, mutable: None, global: None, lifetime: None, priority: None })), operator: Add, right_op: Right(ConstInt(1)) })), true)
> 221:      None